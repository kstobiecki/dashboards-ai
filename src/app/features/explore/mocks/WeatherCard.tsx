'use client';

import { ExploreCard } from '../context/ExploreContext';
import { nanoid } from 'nanoid';

export const createWeatherCard = (): ExploreCard => ({
  id: `weather-${nanoid(10)}`,
  conversationHistory: {
    prompts: 'Create a dashboard that displays the weather for Los Angeles. Use any free open weather API to get the data. Refresh the data every 10 minutes.',
    html: Buffer.from(encodedHtml, 'base64').toString('utf8'),
  },
  intervalSettings: {
    isEnabled: false,
    interval: 5,
    prompt: '',
  },
});

const encodedHtml = "";