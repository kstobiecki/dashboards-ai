'use client';

import { ExploreCard } from '../context/ExploreContext';
import { nanoid } from 'nanoid';

export const createToDoCard = (): ExploreCard => ({
  id: `todo-${nanoid(10)}`,
  conversationHistory: {
    prompts: 'Create a view for the todo list. User should be able to add, mark as completed, and delete todos.',
    html: Buffer.from(encodedHtml, 'base64').toString('utf8'),
  },
  intervalSettings: {
    isEnabled: false,
    interval: 5,
    prompt: '',
  },
});

const encodedHtml = ``