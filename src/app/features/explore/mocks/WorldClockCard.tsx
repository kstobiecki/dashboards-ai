'use client';

import { ExploreCard } from '../context/ExploreContext';
import { nanoid } from 'nanoid';

export const createWorldClockCard = (): ExploreCard => ({
  id: `world-clock-${nanoid(10)}`,
  conversationHistory: {
    prompts: 'Create a visual with three analog-style world clocks showing the current time in New York, London, and Tokyo. Each clock should have a traditional round face with hour, minute, and second hands. Label each clock with the corresponding city name. The design should be clean and easy to read.',
    html: Buffer.from(encodedHtml, 'base64').toString('utf8'),
  },
  intervalSettings: {
    isEnabled: false,
    interval: 5,
    prompt: '',
  },
});

const encodedHtml = ``